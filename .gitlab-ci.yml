stages:
  - create-env
  - build
  - deploy

variables:
  RESOURCE_PATH: ./backend/src/main/resources/application.yml
  PROJECT_NAME: jansorry
  DOCKER_COMPOSE_FILE: docker-compose.yml
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

create-env:
  stage: create-env
  script:
    - echo "DB_URL=${DB_URL}" >> .env
    - echo "DB_NAME=${DB_NAME}" >> .env
    - echo "DB_USERNAME=${DB_USERNAME}" >> .env
    - echo "DB_PASSWORD=${DB_PASSWORD}" >> .env
    - echo "SECRET_KEY = ${SECRET_KEY}" >> .env
    - echo "REFRESH_SECRET_KEY = ${REFRESH_SECRET_KEY}" >> .env
    - echo "REDIS_HOST = ${REDIS_HOST}" >> .env
    - echo "REDIS_PORT = ${REDIS_PORT}" >> .env
    - echo "REDIS_PASSWORD = ${REDIS_PASSWORD}" >> .env
    - echo "CLIENT_ID = ${CLIENT_ID}" >> .env
    - echo "REDIRECT_URI = ${REDIRECT_URI}" >> .env
    # - cat .env # debug
    # - pwd
  artifacts:
    paths:
      - .env # .env 파일을 아티팩트로 지정

build:
  stage: build
  image: gradle:jdk17
  script:
    - cd backend
    - chmod +x gradlew
    - ./gradlew clean build
  cache:
    paths:
      - .gradle/wrapper
      - .gradle/caches
  artifacts:
    paths:
      - backend/build/libs/jansorry-0.0.1-SNAPSHOT.jar
  only:
    - be-deploy

docker-build:
  stage: deploy
  dependencies:
    - create-env
    - build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    # - docker rm -f $(docker ps -qa) || true #전체 컨테이너 삭제
    - docker rmi ${DOCKER_USERNAME}/${DOCKER_REPO} || true

    # jar dir check
    # - ls -al backend/build/libs/
    # - pwd
    # - ls -al
    # - cp .env ./backend/ #env copy

    - docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
    - cd backend
    - docker build -t ${DOCKER_USERNAME}/${DOCKER_REPO}:latest -f Dockerfile .
    - docker push ${DOCKER_USERNAME}/${DOCKER_REPO}

    - cd ..
    # - pwd
    # Docker Compose를 사용하여 환경 변수 적용 및 컨테이너 실행
    - docker-compose -f $DOCKER_COMPOSE_FILE up -d
    # - docker image prune -f

  only:
    - be-deploy
  # tags:
  #   - docker
