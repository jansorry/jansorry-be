stages:
  - create-env
  - backend-build
  - docker-build
  - docker-pull

variables:
  DOCKER_COMPOSE_FILE: docker-compose.yml

create-env:
  stage: create-env
  script:
    - echo "DB_URL=${DB_URL}" >> .env
    - echo "DB_NAME=${DB_NAME}" >> .env
    - echo "DB_USERNAME=${DB_USERNAME}" >> .env
    - echo "DB_PASSWORD=${DB_PASSWORD}" >> .env
    - echo "SECRET_KEY = ${SECRET_KEY}" >> .env
    - echo "REFRESH_SECRET_KEY = ${REFRESH_SECRET_KEY}" >> .env
    - echo "REDIS_HOST = ${REDIS_HOST}" >> .env
    - echo "REDIS_PORT = ${REDIS_PORT}" >> .env
    - echo "REDIS_PASSWORD = ${REDIS_PASSWORD}" >> .env
    - echo "CLIENT_ID = ${CLIENT_ID}" >> .env
    - echo "REDIRECT_URI = ${REDIRECT_URI}" >> .env
  artifacts:
    paths:
      - .env
  only:
    - be-deploy

backend-build:
  stage: backend-build
  image: gradle:jdk17
  script:
    - cd backend
    - chmod +x gradlew
    - ./gradlew clean build
  cache:
    paths:
      - .gradle/wrapper
      - .gradle/caches
  artifacts:
    paths:
      - backend/build/libs/jansorry-0.0.1-SNAPSHOT.jar
  only:
    - be-deploy

docker-build:
  stage: docker-build
  dependencies:
    - create-env
    - backend-build
  script:
    # image removal
    - docker rmi ${DOCKER_USERNAME}/${DOCKER_REPO}:backend-latest || true
    # login
    - docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
    # backend push
    - cd backend
    - docker build -t ${DOCKER_USERNAME}/${DOCKER_REPO}:backend-latest -f Dockerfile .
    - docker push ${DOCKER_USERNAME}/${DOCKER_REPO}:backend-latest
  only:
    - be-deploy

docker-pull:
  stage: docker-pull
  script:
    # login again
    - docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
    # container removal
    - docker stop $(docker ps -q --filter ancestor=${DOCKER_USERNAME}/${DOCKER_REPO}:backend-latest) || true
    - docker rm $(docker ps -aq --filter ancestor=${DOCKER_USERNAME}/${DOCKER_REPO}:backend-latest) || true
    # deploy
    - docker-compose -f $DOCKER_COMPOSE_FILE pull
    - docker-compose -f $DOCKER_COMPOSE_FILE up -d
    - docker image prune -f
  only:
    - be-deploy
